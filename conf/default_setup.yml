training:
  n_epochs: 75
  # n_epochs: 125
  # learning_rate: 1.e-5
  # learning_rate: 1.77e-5 # 1e-4 / sqrt(32)
  learning_rate: 5.e-5
  # learning_rate: 1.e-4
  backup_epochs: false
  clamp_predictions: false
targets:
  # avg_reproj_err:                  {n_out: 1,   activation: null,      min: 0.0, max: null, unit: px}
  avg_reproj_err:                  {n_out: 1,   activation: null,      min: 0.0, max: 50.0, unit: px}

  pixel_offset:                    {n_out: 2,   activation: null,      min: null, max: null, unit: px}
  # rel_depth_error:                 {n_out: 1,   activation: abs,       min: 0.0, max: null, unit: log_factor}
  rel_depth_error:                 {n_out: 1,   activation: null,      min: null, max: null, unit: log_factor}
  norm_pixel_offset:               {n_out: 1,   activation: null,      min: 0.0, max: null, unit: px}
  # norm_pixel_offset:               {n_out: 1,   activation: null,      min: 0.0, max: 50.0, unit: px}
  # delta_angle_inplane_signed:      {n_out: 1,   activation: null,      min: null, max: null, unit: angle}
  # delta_angle_inplane_unsigned:    {n_out: 1,   activation: null,      min: 0.0, max: 3.1416, unit: angle}
  # delta_angle_paxis:               {n_out: 1,   activation: null,      min: 0.0, max: 3.1416, unit: angle}

  # delta_angle_total:               {n_out: 1,   activation: null,      min: 0.0, max: 1.5708, unit: angle}
  delta_angle_total:               {n_out: 1,   activation: null,      min: 0.0, max: 3.1416, unit: angle}
  # delta_angle_total:               {n_out: 1,   activation: square,    min: 0.0, max: 3.1416, unit: angle}
  # delta_angle_total:               {n_out: 1,   activation: abs,       min: 0.0, max: 3.1416, unit: angle}

  # delta_angle_inplane_cosdist:     {n_out: 1,   activation: null,      min: 0.0, max: 2.0, unit: cosdist}
  # delta_angle_paxis_cosdist:       {n_out: 1,   activation: null,      min: 0.0, max: 2.0, unit: cosdist}
  # delta_angle_total_cosdist:       {n_out: 1,   activation: null,      min: 0.0, max: 2.0, unit: cosdist}
tasks:
  # pixel_offset:                       {target: pixel_offset,                      loss_func: L1,   loss_weight: 1.e-2,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # rel_depth_error:                    {target: rel_depth_error,                   loss_func: L1,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # delta_angle_inplane:                {target: delta_angle_inplane_signed,        loss_func: L1,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # delta_angle_paxis:                  {target: delta_angle_paxis,                 loss_func: L1,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # delta_angle_total:                  {target: delta_angle_total,                 loss_func: L1,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # norm_pixel_offset:                  {target: norm_pixel_offset,                 loss_func: L2,   loss_weight: 1.e-2,   clamp_before_loss: false, prior_loss: null, loss_decay: null}
  # delta_angle_inplane_unsigned_L2:    {target: delta_angle_inplane_unsigned,      loss_func: L2,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: [{method: exp_decay, halflife: 0.2}]} # Decay by 0.5 after every "halflife" radians. 0.1 radians ~= 5.7deg
  # delta_angle_paxis_L2:               {target: delta_angle_paxis,                 loss_func: L2,   loss_weight: 1.0,   clamp_before_loss: false, prior_loss: null, loss_decay: [{method: exp_decay, halflife: 0.2}]} # Decay by 0.5 after every "halflife" radians. 0.1 radians ~= 5.7deg

  avg_reproj_err:
    target: avg_reproj_err
    loss_func: L1
    loss_weight: 1.e-2
    clamp_before_loss: false
    prior_loss: null
    # prior_loss: {method: sinkhorn, loss_weight: 1.0}
    loss_decay: null
    # loss_decay:
    #   - {method: exp_decay, target: rel_depth_error, halflife: 0.00860017, additive_decay_bias: 0.1} # log(1.02)=0.00860017, log(1.05)=0.021189, log(1.2)=0.079
    #   # - {method: relative, min_denominator: 1.0}
    # #   # - {method: relative, min_denominator: 0.5}
    #   # - {method: relative, min_denominator: 0.1}
    # #   # - {method: relative, min_denominator: 0.05}
    #   # - {method: relative, min_denominator: 0.01}

  # rel_depth_error:
  #   target: rel_depth_error
  #   loss_func: L1
  #   loss_weight: 1.0
  #   clamp_before_loss: false
  #   prior_loss: null
  #   loss_decay: null
  # fine_rel_depth_error:
  #   target: rel_depth_error
  #   loss_func: L1
  #   loss_weight: 1.0
  #   clamp_before_loss: false
  #   prior_loss: null
  #   loss_decay: null
  # norm_pixel_offset:
  #   target: norm_pixel_offset
  #   loss_func: L1
  #   loss_weight: 1.e-2
  #   clamp_before_loss: false
  #   prior_loss: null
  #   loss_decay: null
    # loss_decay:
    #   # - {method: relative, min_denominator: 0.5}
    #   - {method: relative, min_denominator: 0.1}
    #   # - {method: relative, min_denominator: 0.05}
    #   # - {method: relative, min_denominator: 0.01}
  # pixel_offset:
  #   target: pixel_offset
  #   loss_func: L1
  #   loss_weight: 1.e-2
  #   clamp_before_loss: false
  #   prior_loss: null
  #   loss_decay: null
  #   # loss_decay:
  #   #   # - {method: relative, min_denominator: 0.5}
  #   #   - {method: relative, min_denominator: 0.1}
  #   #   # - {method: relative, min_denominator: 0.05}
  #   #   # - {method: relative, min_denominator: 0.01}
  # delta_angle_total:
  #   target: delta_angle_total
  #   loss_func: L1
  #   # loss_func: L2
  #   loss_weight: 1.0
  #   clamp_before_loss: false
  #   prior_loss: null
  #   loss_decay: null
  #   # BELOW: deactivated loss decay based on other targets (in order not to train angle when too hard).
  #   # loss_decay:
  #   #   # - {method: relative, min_denominator: 0.005}
  #   # 
  #   #   # 0-20 px
  #   #   - {method: smoothstep, target: norm_pixel_offset, x1: 0.0, x2: 20.0, y1: 1.0, y2: 0.0}
  #   #   # 0-40 px
  #   #   # - {method: smoothstep, target: norm_pixel_offset, x1: 0.0, x2: 40.0, y1: 1.0, y2: 0.0}
  #   #   # 20-40 px
  #   #   # - {method: smoothstep, target: norm_pixel_offset, x1: 20.0, x2: 40.0, y1: 1.0, y2: 0.0}
  #   # 
  #   #   # 1.0-1.2
  #   #   - {method: smoothstep, target: rel_depth_error, x1: -0.079, x2: -0.0, y1: 0.0, y2: 1.0} # log(1.2)=0.079
  #   #   - {method: smoothstep, target: rel_depth_error, x1: 0.0, x2: 0.079, y1: 1.0, y2: 0.0} # log(1.2)=0.079
  #   #   # 1.0-1.5
  #   #   # - {method: smoothstep, target: rel_depth_error, x1: -0.176, x2: -0.0, y1: 0.0, y2: 1.0} # log(1.5)=0.176
  #   #   # - {method: smoothstep, target: rel_depth_error, x1: 0.0, x2: 0.176, y1: 1.0, y2: 0.0} # log(1.5)=0.176
  #   #   # 1.2-1.5
  #   #   # - {method: smoothstep, target: rel_depth_error, x1: -0.176, x2: -0.079, y1: 0.0, y2: 1.0} # log(1.2)=0.079, log(1.5)=0.176
  #   #   # - {method: smoothstep, target: rel_depth_error, x1: 0.079, x2: 0.176, y1: 1.0, y2: 0.0} # log(1.2)=0.079, log(1.5)=0.176
aux_tasks:
  fg_mask:
    enabled: true
    # enabled: false
    anno_trust_mode: everywhere
    # anno_trust_mode: matching_depth
    # anno_trust_mode: bg_or_matching_depth
logging:
  avg_window_size: 25
model:
  architecture: flownet2
  flownet2_opts:
    type: FlowNetS
    # type: FlowNetSD
    weight_decay: 3.e-5
    renormalize_imgs: true
    rescale_img_factor: 1.0 # Keep in [-0.5, 0.5] range
    encoder_freeze_nbr_epochs: null
    # encoder_freeze_nbr_epochs: 3
# model:
#   architecture: resnet18
#   resnet18_opts:
#     weight_decay: 3.e-5
#     # encoder_freeze_nbr_epochs: null
#     encoder_freeze_nbr_epochs: 3
#     pretrained: true
#     unfreeze_merge_layer: true
#     # unfreeze_merge_layer: false
#     E2_pretrained: true
# 
#     # Original
#     E2_include_highlevel: false
#     depth: 18
#     init_ds: true
#     max_pool: true
#     final_ds: null
#     avg_pool: false
# 
#     # # avg_pool
#     # E2_include_highlevel: false
#     # depth: 18
#     # init_ds: true
#     # max_pool: true
#     # final_ds: null
#     # avg_pool: true
# 
#     # # 14-highres
#     # E2_include_highlevel: false # Effectively 14 layers
#     # depth: 18
#     # init_ds: false
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: true
# 
#     # # 14-nomaxpool
#     # E2_include_highlevel: false # Effectively 14 layers
#     # depth: 18
#     # init_ds: true
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: false
# 
#     # # 18-nomaxpool
#     # E2_include_highlevel: true
#     # depth: 18
#     # init_ds: true
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: false
# 
#     # # 14-nomaxpool-ds2
#     # E2_include_highlevel: false # Effectively 14 layers
#     # depth: 18
#     # init_ds: true
#     # max_pool: false
#     # final_ds: 2
#     # avg_pool: false
# 
#     # # 14-highres-ds2
#     # E2_include_highlevel: false # Effectively 14 layers
#     # depth: 18
#     # init_ds: false
#     # max_pool: false
#     # final_ds: 2
#     # avg_pool: false
# 
#     # # 18-highres
#     # E2_include_highlevel: true
#     # depth: 18
#     # init_ds: false
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: true
# 
#     # # 18-highres-ds4
#     # E2_include_highlevel: true
#     # depth: 18
#     # init_ds: false
#     # max_pool: false
#     # final_ds: 4
#     # avg_pool: false
# 
#     # # 28-highres
#     # E2_include_highlevel: false # Effectively 28 layers
#     # depth: 34
#     # init_ds: false
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: true
# 
#     # # 34-highres
#     # E2_include_highlevel: true
#     # depth: 34
#     # init_ds: false
#     # max_pool: false
#     # final_ds: null
#     # avg_pool: true

  head_layer_specs:
    avg_reproj_err:
      tasks: [avg_reproj_err]
      layers:
        - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
        - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
        - {dropout_factor: null, bias: true, relu_flag: false}
    # pixel_offset:
    #   tasks: [pixel_offset]
    #   layers:
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {dropout_factor: null, bias: true, relu_flag: false}
    # norm_pixel_offset:
    #   tasks: [norm_pixel_offset]
    #   layers:
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {dropout_factor: null, bias: true, relu_flag: false}
    # rel_depth_error:
    #   tasks: [rel_depth_error]
    #   layers:
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {dropout_factor: null, bias: true, relu_flag: false}
    # fine_rel_depth_error:
    #   tasks: [fine_rel_depth_error]
    #   layers:
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {dropout_factor: null, bias: true, relu_flag: false}
    # dflt:
    #   tasks: null
    #   layers:
    #     # - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     # - {n_out: 1024, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 2048, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {n_out: 2048, dropout_factor: 0.3, bias: true, relu_flag: true}
    #     - {dropout_factor: null, bias: true, relu_flag: false}
    #     # - {dropout_factor: null, bias: false, relu_flag: false}
data:
  dataformat: dummy
  path: /datasets/occluded-linemod-augmented
  nyud_path: /datasets/nyud
  voc_path: /datasets/voc
  img_dims: [480, 640]
  # crop_dims: [128, 128]
  # crop_dims: [256, 256]
  crop_dims: [512, 512]
  # Pipeline was modified such that rendering is done in the pipeline itself, rather than in dataset module.
  # For convenience, glumpy is not yet supported. Multiple glumpy renderer instances seem to interfere, i.e. allowing for this would require a central renderer module, taking requests from either pipelin or dataset module.
  # query_rendering_method: glumpy
  query_rendering_method: neural
  query_rendering_opts:
    ambient_weight: 0.8
    # lowres_render_size: null
    # lowres_render_size: [8, 8]
    # lowres_render_size: [16, 16]
    # lowres_render_size: [32, 32]
    lowres_render_size: [128, 128] # for efficiency - render at (128,128), but upsample to crop_size
  crop_box_resize_factor: 1.2
  synth_ref_min_nbr_unoccluded_pixels: 200
  # ref_colorjitter_during_train: true
  ref_colorjitter_during_train: false
